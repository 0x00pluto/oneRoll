<?php

/**
 * Created by PhpStorm.
 * User: zhipeng
 * Date: 16/8/17
 * Time: 下午2:25
 */

/**
 * 数组探针
 * Class arrayProbe
 */
class arrayProbe extends ArrayObject
{
    private $readKeys = [];
    private $writeKeys = [];
    private $existsKeys = [];


    private $callRoute = [];


    /**
     * @var string
     */
    private $name;

    /**
     * arrayProbe constructor.
     */
    public function __construct()
    {
        parent::__construct();

        $debug_Info = debug_backtrace();
        foreach ($debug_Info as $value) {
            if (isset($value['file'])) {
                $info = $value ['file'] . ':' . $value ['line'] . " " . $value ['function'];
                $this->callRoute[] = $info;
            }
        }
    }

    /**
     * @return string
     */
    public function getName()
    {
        return $this->name;
    }


    public function offsetGet($index)
    {
        if (isset($this->readKeys[$index])) {
            return $index;
        }
        $this->readKeys[$index] = count($this->readKeys);
        return $index;
    }

    public function offsetSet($index, $newval)
    {
        if (isset($this->writeKeys[$index])) {
            return;
        }
        $this->writeKeys[$index] = count($this->writeKeys);

    }

    public function offsetExists($index)
    {
        $this->existsKeys[$index] = 1;
        return true;
    }

    public function offsetUnset($index)
    {
        parent::offsetUnset($index); // TODO: Change the autogenerated stub
    }

    public function serialize()
    {
        parent::serialize(); // TODO: Change the autogenerated stub
    }

    public function unserialize($serialized)
    {
        parent::unserialize($serialized); // TODO: Change the autogenerated stub
    }

    public function count()
    {
        return 1;
    }


    public function dumpReadKeys()
    {
        $keyMap = "\nprotected \$keyMap = [\n";

        foreach ($this->readKeys as $key => $value) {
            $keyMap .= "\"$key\" => \"\",\n";
        }
        foreach ($this->writeKeys as $key => $value) {
            $keyMap .= "\"$key\" => \"\",\n";
        }
        $keyMap .= "];\n";

//        var_dump([
//            "name" => $this->name,
//            "readKeys" => $this->readKeys,
//            "keyMap" => $keyMap
//        ]);

        \hellaEngine\support\dump([
            "name" => $this->name,
            "callRoutes" => $this->callRoute,
            "readKeys" => $this->readKeys,
            "writeKeys" => $this->writeKeys,
        ]);
        echo $keyMap;
    }

    /**
     * @param $name
     * @return arrayProbe
     */
    public static function create($name)
    {
        if (isset(self::$probes[$name])) {
            return self::$probes[$name];
        }
        $ins = new self();
        $ins->name = $name;
        self::$probes[$name] = $ins;
        return $ins;
    }

    private static $probes = [];

    /**
     * dump探针
     */
    public static function dumpProbes()
    {
        foreach (self::$probes as $probe) {
            /**
             * @var $probe arrayProbe
             */
            $probe->dumpReadKeys();
        }
    }


}